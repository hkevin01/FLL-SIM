[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "fll-sim"
version = "0.1.0"
description = "First Lego League Robot and Map Simulator"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "FLL-Sim Development Team", email = "dev@fll-sim.org"},
]
keywords = ["robotics", "simulation", "education", "lego", "fll"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Education",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Games/Entertainment :: Simulation",
]
dependencies = [
    "pygame>=2.5.0",
    "numpy>=1.21.0",
    "matplotlib>=3.5.0",
    "pymunk>=6.2.0",
    "Pillow>=9.0.0",
    "pyyaml>=6.0",
    "click>=8.0.0",
    "dataclasses-json>=0.5.7",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "pre-commit>=2.20.0",
]
docs = [
    "mkdocs>=1.4.0",
    "mkdocs-material>=8.5.0",
    "mkdocs-autorefs>=0.4.1",
    "mkdocstrings[python]>=0.19.0",
]
viz = [
    "pygame-gui>=0.6.0",
    "moderngl>=5.6.0",
    "PyOpenGL>=3.1.0",
]

[project.urls]
Homepage = "https://github.com/your-username/FLL-Sim"
Documentation = "https://fll-sim.readthedocs.io/"
Repository = "https://github.com/your-username/FLL-Sim.git"
"Bug Tracker" = "https://github.com/your-username/FLL-Sim/issues"

[project.scripts]
fll-sim = "fll_sim.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
fll_sim = ["assets/**/*", "config/**/*"]

[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311"]
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "-ra",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
