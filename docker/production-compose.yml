##############################
# FLL-Sim Production Docker Compose
# Complete containerized deployment
##############################

version: "3.9"

services:
  # Core FLL-Sim Application
  fll-sim-app:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: runtime
    container_name: fll-sim-app
    restart: unless-stopped
    environment:
      PYTHONUNBUFFERED: "1"
      FLL_SIM_HEADLESS: "0"
      PYTHONPATH: "/app/src"
      DATABASE_URL: "postgresql://fllsim:${POSTGRES_PASSWORD:-fllsimpass}@postgres:5432/fllsim"
      REDIS_URL: "redis://redis:6379/0"
      LOG_LEVEL: "${LOG_LEVEL:-INFO}"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - app_data:/app/data
      - user_profiles:/app/profiles
      - simulation_logs:/app/logs
    networks:
      - fll-sim-network
    healthcheck:
      test: ["CMD", "python", "-c", "import fll_sim"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Headless Simulation Service
  fll-sim-headless:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: runtime
    container_name: fll-sim-headless
    restart: unless-stopped
    environment:
      PYTHONUNBUFFERED: "1"
      FLL_SIM_HEADLESS: "1"
      QT_QPA_PLATFORM: "offscreen"
      PYTHONPATH: "/app/src"
      DATABASE_URL: "postgresql://fllsim:${POSTGRES_PASSWORD:-fllsimpass}@postgres:5432/fllsim"
      REDIS_URL: "redis://redis:6379/0"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - simulation_results:/app/results
      - simulation_logs:/app/logs
    networks:
      - fll-sim-network
    command: ["python", "-m", "fll_sim.cli", "--headless", "--daemon"]
    healthcheck:
      test: ["CMD", "python", "-c", "import fll_sim"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Educational Platform API
  fll-sim-api:
    build:
      context: ..
      dockerfile: docker/api.Dockerfile
    container_name: fll-sim-api
    restart: unless-stopped
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      PYTHONUNBUFFERED: "1"
      DATABASE_URL: "postgresql://fllsim:${POSTGRES_PASSWORD:-fllsimpass}@postgres:5432/fllsim"
      REDIS_URL: "redis://redis:6379/0"
      SECRET_KEY: "${SECRET_KEY:-dev-secret-change-in-production}"
      CORS_ORIGINS: "${CORS_ORIGINS:-http://localhost:3000,http://localhost:8080}"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - api_logs:/app/logs
      - user_profiles:/app/profiles:ro
    networks:
      - fll-sim-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Frontend (if exists)
  fll-sim-web:
    build:
      context: ..
      dockerfile: docker/web.Dockerfile
    container_name: fll-sim-web
    restart: unless-stopped
    ports:
      - "${WEB_PORT:-3000}:3000"
    environment:
      NODE_ENV: "production"
      API_BASE_URL: "http://fll-sim-api:8000"
    depends_on:
      - fll-sim-api
    networks:
      - fll-sim-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Task Queue Worker
  fll-sim-worker:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: runtime
    container_name: fll-sim-worker
    restart: unless-stopped
    environment:
      PYTHONUNBUFFERED: "1"
      FLL_SIM_HEADLESS: "1"
      WORKER_MODE: "1"
      DATABASE_URL: "postgresql://fllsim:${POSTGRES_PASSWORD:-fllsimpass}@postgres:5432/fllsim"
      REDIS_URL: "redis://redis:6379/0"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - worker_logs:/app/logs
      - simulation_results:/app/results
    networks:
      - fll-sim-network
    command: ["python", "-m", "fll_sim.worker"]

  # Database
  postgres:
    image: postgres:15-alpine
    container_name: fll-sim-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: fllsim
      POSTGRES_USER: fllsim
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD:-fllsimpass}"
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - fll-sim-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fllsim -d fllsim"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: fll-sim-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass "${REDIS_PASSWORD:-fllsimpass}"
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - fll-sim-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-fllsimpass}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # File Storage Service
  minio:
    image: minio/minio:latest
    container_name: fll-sim-storage
    restart: unless-stopped
    command: server /data --console-address ":9001"
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    environment:
      MINIO_ROOT_USER: "${MINIO_ROOT_USER:-admin}"
      MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD:-adminpass123}"
    volumes:
      - minio_data:/data
    networks:
      - fll-sim-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: fll-sim-nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - fll-sim-api
      - fll-sim-web
    networks:
      - fll-sim-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring & Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: fll-sim-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - fll-sim-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  grafana:
    image: grafana/grafana:latest
    container_name: fll-sim-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: "${GRAFANA_PASSWORD:-admin}"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - fll-sim-network

  # Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: fll-sim-loki
    restart: unless-stopped
    ports:
      - "${LOKI_PORT:-3100}:3100"
    volumes:
      - loki_data:/loki
      - ./loki/loki.yml:/etc/loki/local-config.yaml:ro
    networks:
      - fll-sim-network
    command: -config.file=/etc/loki/local-config.yaml

  promtail:
    image: grafana/promtail:latest
    container_name: fll-sim-promtail
    restart: unless-stopped
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./promtail/promtail.yml:/etc/promtail/config.yml:ro
    depends_on:
      - loki
    networks:
      - fll-sim-network
    command: -config.file=/etc/promtail/config.yml

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  app_data:
    driver: local
  user_profiles:
    driver: local
  simulation_logs:
    driver: local
  simulation_results:
    driver: local
  api_logs:
    driver: local
  worker_logs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

networks:
  fll-sim-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
